<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="ls.dao.StudentMapper" >
  <resultMap id="BaseResultMap" type="ls.model.Student" >
  	<!-- 这个是标识符即主键  -->
    <id column="ID" property="id" jdbcType="DECIMAL" />
    <!-- 这些非标示符非主键 -->
    <result column="NAME" property="name" jdbcType="VARCHAR" />
    <result column="SEX" property="sex" jdbcType="VARCHAR" />
    <result column="LIKES" property="likes" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    ID, NAME, SEX, LIKES
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from STUDENT
    where ID = #{id,jdbcType=DECIMAL}
  </select>

 <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from STUDENT
    where name = '小哈'
  </select>
  
  <select id="selectByNameLike" resultType="ls.model.Student"  parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from STUDENT
    where name  LIKE concat(concat('%',#{username}),'%')
  </select>
  
  <select id="selectByNameLikeMoreParam" resultType="ls.model.Student"  parameterType="ls.model.Student" >
    select 
    <include refid="Base_Column_List" />
    from STUDENT
    where name LIKE concat(concat('%',#{name}),'%') AND id>#{id}
    <!-- 这里可以通过#获取多个参数， #内部属性对应parameterType对应类中的属性  -->
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from STUDENT
    where ID = #{id,jdbcType=DECIMAL}
  </delete>
  <insert id="insert" parameterType="ls.model.Student" useGeneratedKeys="false" >
  	<selectKey resultType="Long" keyProperty="id" order="BEFORE">
  		SELECT STUDENT_SEQ.NEXTVAL as qweqwe FROM dual
  	</selectKey>
    insert into STUDENT (ID, NAME, SEX, 
      LIKES)
    values (#{id,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, 
      #{likes,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="ls.model.Student" >
    insert into STUDENT
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="name != null" >
        NAME,
      </if>
      <if test="sex != null" >
        SEX,
      </if>
      <if test="likes != null" >
        LIKES,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="likes != null" >
        #{likes,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="ls.model.Student" >
    update STUDENT
    <set >
      <if test="name != null" >
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        SEX = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="likes != null" >
        LIKES = #{likes,jdbcType=VARCHAR},
      </if>
    </set>
    where ID = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="ls.model.Student" >
    update STUDENT
    set NAME = #{name,jdbcType=VARCHAR},
      SEX = #{sex,jdbcType=VARCHAR},
      LIKES = #{likes,jdbcType=VARCHAR}
    where ID = #{id,jdbcType=DECIMAL}
  </update>
</mapper>